name: Push the Docker image to AWS ECR Repo

on:
  push:
    branches: ["not-now"]

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the Server image to Amazon ECR
        id: build-image-server
        env:
          ECR_SERVER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_SERVER_REPOSITORY: ${{ secrets.REPO_NAME_SERVER }}
        run: |
          docker build --build-arg NODE_IMAGE=node:20-alpine --no-cache -t $ECR_SERVER_REGISTRY/$ECR_SERVER_REPOSITORY -f Dockerfile.server .
          docker push $ECR_SERVER_REGISTRY/$ECR_SERVER_REPOSITORY

      - name: Build, tag, and push the Web image to Amazon ECR
        id: build-image-web
        env:
          ECR_WEB_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_WEB_REPOSITORY: ${{ secrets.REPO_NAME_WEB }}
          VITE_APP_BASE_URL: ${{ secrets.VITE_APP_BASE_URL }}
        run: |
          docker build --build-arg VITE_APP_BASE_URL=$VITE_APP_BASE_URL --build-arg NGINX_IMAGE=nginx:stable-alpine --build-arg NODE_IMAGE=node:20-alpine -t $ECR_WEB_REGISTRY/$ECR_WEB_REPOSITORY -f Dockerfile.web .
          docker push $ECR_WEB_REGISTRY/$ECR_WEB_REPOSITORY
